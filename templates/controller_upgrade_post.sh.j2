source {{ undercloud_rc }}
NODE_IP=$(openstack server show {{ node_name | splitext | first }} -f json  | jq -r .addresses | grep -oP '[0-9.]+')

{% if controller_reboot %}
OVS_RUNNING=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo ovs-vsctl show' | grep ovs_version | awk -F \" {'print $2'} | awk -F "." '{print $1"."$2}')
OVS_INSTALLED=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo rpm --queryformat %{VERSION} -q openvswitch' | awk -F "." '{print $1"."$2}')
if [[ $OVS_RUNNING != $OVS_INSTALLED ]]; then
    echo "Upgraded OVS detected"
fi
echo "Rebooting {{ node_name | splitext | first }}"
{% if force_reboot %}
NOVA_ID=$(openstack server list | grep {{ node_name | splitext | first }} | awk {'print $2'})
IRONIC_ID=$(ironic node-list | grep $NOVA_ID | awk {'print $2'})
ironic node-set-power-state $IRONIC_ID reboot
{% else %}
ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo shutdown -r now'
{% endif %}

timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for {{ node_name }} to go down ..."
    NODE_DOWN=$(ping -c1 $NODE_IP)
    if [ $? != 0 ]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: Node {{ node_name }} didn't reboot in time"
    exit 1
    fi
done
{% endif %}

## wait for node to get back online
timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for {{ node_name }} to boot ..."
    PCS_STATUS=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status' | grep ^Online)
    if [[ $PCS_STATUS == *{{ node_name }}* ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: {{ node_name }} didn't come back up as part of the cluster"
    exit 1
    fi
done

## wait for haproxy resource to come back up
timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for haproxy pcs resource to start"
    HAPROXY_RES=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status --full' | grep haproxy-bundle | grep -i started | wc -l)
    if [[ $HAPROXY_RES = 1 ]] || [[ $HAPROXY_RES > 2 ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: Haproxy pcs resource didn't get started after reboot"
    exit 1
    fi
done

## wait for rabbitmq resource to come back up
timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for rabbitmq pcs resource to start"
    RABBIT_RES=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status --full' | grep ocf::heartbeat:rabbitmq-cluster | grep -vi FAILED | grep -i started | wc -l)
    if [[ $RABBIT_RES = 1 ]] || [[ $RABBIT_RES > 2 ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: Rabbitmq pcs resource didn't get started after reboot"
    exit 1
    fi
done

## wait for galera resource to come back up
timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for galera pcs resource to start"
    GALERA_RES=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status --full' | grep ocf::heartbeat:galera | grep -vi FAILED | grep -i master | wc -l)
    if [[ $GALERA_RES = 1 ]] || [[ $GALERA_RES > 2 ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "WARNING: galera pcs resource didn't get started after reboot. Trying to workaround BZ#1499677"
        GVWSTATE_SIZE=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo wc -c /var/lib/mysql/gvwstate.dat' | awk {'print $1'})
        if [ $GVWSTATE_SIZE -eq 0 ]; then
            echo "Removing gvwstate.dat"
            ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo rm -f /var/lib/mysql/gvwstate.dat'
            echo "Rebooting node"
{% if force_reboot %}
            ironic node-set-power-state $IRONIC_ID reboot
{% else %}
            ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo shutdown -r now'
{% endif %}
            timeout_seconds={{ node_reboot_timeout }}
            elapsed_seconds=0
            while true; do
                echo "Waiting for galera pcs resource to start"
                GALERA_RES=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status --full' | grep ocf::heartbeat:galera | grep -i master | wc -l)
                if [[ $GALERA_RES = 1 ]] || [[ $GALERA_RES > 2 ]]; then
                    break
                fi
                sleep 3
                (( elapsed_seconds += 3 ))
                if [ $elapsed_seconds -ge $timeout_seconds ]; then
                    echo "FAILURE: galera pcs resource didn't get started after reboot. Workaround for BZ#1499677 applied."
                exit 1
                fi
            done
        else
            echo "FAILURE: galera pcs resource didn't get started after reboot"
            exit 1
        fi
    fi
done


## wait for redis resource to come back up
timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    echo "Waiting for redis pcs resource to start"
    REDIS_RES=$(ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP 'sudo pcs status --full' | grep ocf::heartbeat:redis | grep -vi FAILED | grep -i master | wc -l)
    if [[ $REDIS_RES = 1 ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: redis pcs resource didn't get started after reboot"
    exit 1
    fi
done

timeout_seconds={{ node_reboot_timeout }}
elapsed_seconds=0
while true; do
    rm -rf ~/haproxy.stats
    echo "Waiting for haproxy backend services to come up"
ssh -q -o StrictHostKeyChecking=no heat-admin@$NODE_IP > ~/haproxy.stats <<-\SSH
sudo docker exec $(sudo docker ps | grep -oP haproxy-bundle.*) bash -c 'echo "show stat" |  socat /var/lib/haproxy/stats stdio | grep -v redis'
SSH
    grep DOWN ~/haproxy.stats > /dev/null
    if [[ $? != 0 ]]; then
        break
    fi
    sleep 3
    (( elapsed_seconds += 3 ))
    if [ $elapsed_seconds -ge $timeout_seconds ]; then
        echo "FAILURE: $(grep DOWN haproxy.stats | awk -F ',' {'print $1'}) is down on $(grep DOWN haproxy.stats | awk -F ',' {'print $2'})"
    exit 1
    fi
done

